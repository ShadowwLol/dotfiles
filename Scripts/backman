#!/bin/bash

PS3='> '
menus=( "Exit" "Version" "Usage" "Backup" );
backupmenu=( "Return" "Backup installed packages" "Backup pacman.conf" )
app="Backman"


if [[ -f ~/.config/packup/packuprc ]]; then
	source ~/.config/packup/packuprc
else
	DATEFMT=%Y%m%d-%H%M
	BACKUP_DIR=$HOME
	EDITOR=vi
fi
ARGUMENT=$1
OPTION=$2
ver=0.1
TITLE="Packup $VER - Pacman backup & restore script (Alpha Release)"
TMP="/tmp/packup.tmp"

############################################################
# Usage function - Displays usage information              #
############################################################
usage() {
	version
	echo "Usage:"
	echo "      Main program:             packup"
	echo "      Other functions:          packup argument"
	echo "Arguments:"
	echo "      -h, --help     This message"
	echo "      -v, --version  Output version information and exit"
	echo "      -w, --welcome  Displays the welcome dialog"
}

############################################################
# Backup function - Main backup menu                       #
############################################################
backup() {
	select option in "${backupmenu[@]}"; do  done

	dialog --backtitle "$TITLE" --colors --title "Backup menu" --cancel-label "Quit" --menu "" 10 50 4 "1" "Backup installed packages" "2" "Backup pacman.conf" "3" "Backup yaourtrc" "4" "Return to main menu" 2>"$TMP"
	read DV <"$TMP"
	rm -f "$TMP"
	if [[ "$DV" = "1" ]]; then
		backup_packages
	elif [[ "$DV" = "2" ]]; then
		backup_config
	elif [[ "$DV" = "3" ]]; then
		if [[ -f /usr/bin/yaourt ]]; then
			backup_yaourt
		else
			dialog --backtitle "$TITLE" --colors --title "\Zb\Z1ERROR!\Zn" --msgbox "Yaourt does not appear to be installed!" 5 43
			backup
		fi
	elif [[ "$DV" = "4" ]]; then
		main
	else
		clear
		exit
	fi
}
############################################################
# Backup installed packages menu - Duh                     #
############################################################
backup_packages() {
	dialog --backtitle "$TITLE" --colors --title "Backup installed packages" --cancel-label "Quit" --menu "" 10 50 4 "1" "Backup all packages" "2" "Backup official packages" "3" "Backup unofficial packages" "4" "Return to main menu" 2>"$TMP"
	read DV <"$TMP"
	rm -f "$TMP"
	if [[ "$DV" = "1" ]]; then
		backup_all
	elif [[ "$DV" = "2" ]]; then
		backup_official
	elif [[ "$DV" = "3" ]]; then
		backup_unofficial
	elif [[ "$DV" = "5" ]]; then
		main
	else
		clear
		exit
	fi
}
############################################################
# Backup all packages                                      #
############################################################
backup_all() {
	TIMESTAMP=$(eval date +$DATEFMT)
	pacman -Qeq > "$BACKUP_DIR/packup-complete-$TIMESTAMP"
	dialog --backtitle "$TITLE" --colors --title "Complete Package Backup" --textbox "$BACKUP_DIR/packup-complete-$TIMESTAMP" 50 100
	if [[ -f $BACKUP_DIR/packup-complete-$TIMESTAMP ]]; then
		dialog --backtitle "$TITLE" --colors --title "Complete Package Backup" --msgbox "Backup completed successfully to $BACKUP_DIR/packup-complete-$TIMESTAMP!" 0 0
	else
		dialog --backtitle "$TITLE" --colors --title "\Z1ERROR\Zn" --msgbox "Backup failed!" 0 0
	fi
	main
}
############################################################
# Backup official packages                                 #
############################################################
backup_official() {
	TIMESTAMP=$(eval date +$DATEFMT)
	pacman -Qeq > /tmp/packup-all && pacman -Qm | awk '{print $1}' > /tmp/packup-unofficial && comm -13 /tmp/packup-unofficial /tmp/packup-all > $BACKUP_DIR/packup-official-$TIMESTAMP
	rm -f /tmp/packup-{unofficial,all}
	dialog --backtitle "$TITLE" --colors --title "Official Package Backup" --textbox "$BACKUP_DIR/packup-official-$TIMESTAMP" 50 100
	if [[ -f $BACKUP_DIR/packup-official-$TIMESTAMP ]]; then
		dialog --backtitle "$TITLE" --colors --title "Official Package Backup" --msgbox "Backup completed successfully to $BACKUP_DIR/packup-official-$TIMESTAMP!" 0 0
	else
		dialog --backtitle "$TITLE" --colors --title "\Z1ERROR\Zn" --msgbox "Backup failed!" 0 0
	fi
	main
}
############################################################
# Backup unofficial packages                               #
############################################################
backup_unofficial() {
	TIMESTAMP=$(eval date +$DATEFMT)
	pacman -Qmq > "$BACKUP_DIR/packup-unofficial-$TIMESTAMP"
	dialog --backtitle "$TITLE" --colors --title "Unofficial Package Backup" --textbox "$BACKUP_DIR/packup-unofficial-$TIMESTAMP" 50 100
	if [[ -f $BACKUP_DIR/packup-unofficial-$TIMESTAMP ]]; then
		dialog --backtitle "$TITLE" --colors --title "Unofficial Package Backup" --msgbox "Backup completed successfully to $BACKUP_DIR/packup-unofficial-$TIMESTAMP!" 0 0
	else
		dialog --backtitle "$TITLE" --colors --title "\Z1ERROR\Zn" --msgbox "Backup failed!" 0 0
	fi
	main
}
############################################################
# Backup pacman.conf                                       #
############################################################
backup_config() {
	TIMESTAMP=$(eval date +$DATEFMT)
	cp /etc/pacman.conf $BACKUP_DIR/packup-pacman-$TIMESTAMP
	dialog --backtitle "$TITLE" --colors --title "Backup pacman.conf" --msgbox "pacman.conf has been backed up to \"$BACKUP_DIR/packup-pacman-$TIMESTAMP\"" 0 0
	main
}
############################################################
# Backup yaourtrc                                          #
############################################################
backup_yaourt() {
	TIMESTAMP=$(eval date +$DATEFMT)
	cp /etc/yaourtrc $BACKUP_DIR/packup-yaourtrc-$TIMESTAMP
	dialog --backtitle "$TITLE" --colors --title "Backup yaourtrc" --msgbox "yaourtrc has been backed up to \"$BACKUP_DIR/packup-yaourtrc-$TIMESTAMP\"" 0 0
	main
}
############################################################
# Restore from Packup snapshot file                        #
############################################################
restore() {
	if [[ "$(id -u)" != "0" ]]; then
		dialog --backtitle "$TITLE" --colors --title "\Z1ERROR\Zn" --msgbox "This option can only be run by root!" 0 0
		main
	else
		cd $BACKUP_DIR
		find packup-* -maxdepth 0 -type f > /tmp/packup_list && sed -i '/^$/d' /tmp/packup_list
		MENU_NUM=$(cat /tmp/packup_list | wc -l)
		MENU_COUNT=1
		while [[ "$MENU_COUNT" -le "$MENU_NUM" ]]; do
			MENU_TEXT="$MENU_TEXT $MENU_COUNT $(awk NR==$MENU_COUNT /tmp/packup_list)"
			MENU_COUNT=$(($MENU_COUNT+1))
		done
		dialog --backtitle "$TITLE" --colors --title "Restore from snapshot" --menu "" 0 40 $MENU_NUM $MENU_TEXT 2>"$TMP"
		read DV <"$TMP"
		rm -f "$TMP"
		RESTORE_FILE=$(awk NR==$DV /tmp/packup_list)
		if [[ $RESTORE_FILE = *-off* ]]; then
			PKGMAN="pacman --noconfirm --noprogressbar -S "
			restore_install
		elif [[ $RESTORE_FILE = *-unof* ]]; then
			dialog --backtitle "$TITLE" --colors --title "\Z1ALERT\Zn" --yes-label "Run Yaourt" --no-label "Quit" --yesno "Unofficial packages cannot be installed through pacman, therefore yaourt is used. If you do not have yaourt installed, please quit packup and install yaourt before continuing. Would you like to continue?" 0 0
			if [[ $? = 0 ]]; then
				PKGMAN="yaourt --noconfirm --noprogressbar -S "
				restore_install
			else
				clear
				exit
			fi
		elif [[ $RESTORE_FILE = *-com* ]]; then
			dialog --backtitle "$TITLE" --colors --title "\Z1ALERT\Zn" --extra-button --ok-label "Run Pacman" --extra-label "Run Yaourt" --cancel-label "Quit" --yesno "Unofficial packages cannot be installed through pacman, therefore yaourt is used.\n\nIf you are sure that this backup includes no unofficial packages, you may continue by pressing the \"Run Pacman\" button.\n\nIf unofficial packages are included, you may either continue by pressing the \"Run Yaourt\" button, or quit packup." 0 0
			if [[ $? = 0 ]]; then
				PKGMAN="pacman --noconfirm --noprogressbar -S "
				restore_install
			elif [[ $? = 3 ]]; then
				PKGMAN="yaourt --noconfirm --noprogressbar -S "
				restore_install
			else
				clear
				exit
			fi
		elif [[ $RESTORE_FILE = *-pac* ]]; then
			cp $RESTORE_FILE /etc/pacman.conf
			dialog --backtitle "$TITLE" --colors --title "Restore pacman.conf" --msgbox "pacman.conf has been restored from \"$RESTORE_FILE\"" 0 0
			main
		elif [[ $RESTORE_FILE = *-yao* ]]; then
			cp $RESTORE_FILE /etc/yaourtrc
			dialog --backtitle "$TITLE" --colors --title "Restore yaourtrc" --msgbox "yaourtrc has been restored from \"$RESTORE_FILE\"" 0 0
			main
		fi
		clear
		exit
	fi
}
############################################################
# Install function - called by restore()                   #
############################################################
restore_install() {
	$PKGMAN $(cat $BACKUP_DIR/$RESTORE_FILE) | dialog --backtitle "$TITLE" --colors --title "Restoring from snapshot $RESTORE_FILE" --progressbox 50 100
	dialog --backtitle "$TITLE" --colors --title "Restore completed" --msgbox "Snapshot $RESTORE_FILE restore completed." 0 0
	main
}
############################################################
# Edit function - allows editing of config files           #
############################################################
edit() {
	dialog --backtitle "$TITLE" --colors --title "Edit menu" --cancel-label "Quit" --menu "" 10 50 4 "1" "Edit packup configuration" "2" "Edit pacman configuration" "3" "Edit yaourt configuration" "4" "Return to main menu" 2>"$TMP"
	read DV <"$TMP"
	rm -f "$TMP"
	if [[ "$DV" = "1" ]]; then
		$EDITOR ~/.config/packup/packuprc
		edit
	elif [[ "$DV" = "2" ]]; then
		if [[ "$(id -u)" != "0" ]]; then
			dialog --backtitle "$TITLE" --colors --title "\Z1ERROR\Zn" --msgbox "This option can only be run by root!" 0 0
			edit
		else
			$EDITOR /etc/pacman.conf
			edit
		fi
	elif [[ "$DV" = "3" ]]; then
		if [[ -f /usr/bin/yaourt ]]; then
			if [[ "$(id -u)" != "0" ]]; then
				dialog --backtitle "$TITLE" --colors --title "\Z1ERROR\Zn" --msgbox "This option can only be run by root!" 0 0
				edit
			else
				$EDITOR /etc/yaourtrc
				edit
			fi
		else
			dialog --backtitle "$TITLE" --colors --title "\Zb\Z1ERROR!\Zn" --msgbox "Yaourt does not appear to be installed!" 5 43
			edit
		fi
	elif [[ "$DV" = "4" ]]; then
		main
	else
		clear
		exit
	fi
}

start() {
	clear
	printf "%s\n" ${app^^} | sed 's/./& /g'
	select option in "${menus[@]}"
	do
		case $option in
		"Exit") clear && exit 0 ;;
		"Version") clear ; printf "%s\n" ${app^^} | sed 's/./& /g' ; printf "%s\n" "$app v$ver" ; read -s pause ; clear ; start ;;
		"Usage") usage ;;
		"Backup") backup ;;
		*) clear && exit 1 ;;
		esac
	done
}

start
