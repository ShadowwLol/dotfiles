#!/bin/sh

url=${1:-$QUTE_URL}
videolocation="$HOME/Videos/Downloads/"
audiolocation="$HOME/Music/Downloads/"


[ ! -d "$videolocation" ] && mkdir -p "$videolocation"

[ ! -d "$audiolocation" ] && mkdir -p "$audiolocation"

qualities=$(youtube-dl --list-formats "$url")

[ $? != 0 ] && (printf 'message-error "Unsupported URL: %s"' "$url" >>"$QUTE_FIFO" ; exit 1)

choice=$(printf "Video\nAudio" | sort | dmenu -i )
vid() {
	quality=$({
		printf 'best\nbestvideo\n'
		printf '%s\n' "$qualities" | grep '^[[:digit:]]' | tac | sed '/audio/d'
	} | dmenu -l 10 -p 'quality ')

	if [ $? != 0 ]; then
		notify-send "Error"
		exit
	fi

	quality=$(printf '%s' "$quality" | awk '{ print $1 }') ; printf 'download %s\n' "$(youtube-dl -o "$videolocation%(title)s.%(ext)s" --restrict-filenames --format "$quality" $url)"
}

audio() {
	quality=$({
		printf 'bestaudio\n'
		printf '%s\n' "$qualities" | grep -i "audio"
	} | dmenu -l 10 -p 'quality ')

	[ $? != 0 ] && (notify-send "Error" ; exit 1)

	qualitymenu=$(printf '%s' "$quality" | awk '{ print $1 }')
	qualityop=$(printf '%s' "$quality" | awk '{ print $2 }')
	case $quality in
	"bestaudio") printf 'download %s\n' "$(youtube-dl -o "$audiolocation%(title)s.%(ext)s" -x --audio-quality 0 --format "$qualitymenu" --restrict-filenames $url)" ;;
	*) printf 'download %s\n' "$(youtube-dl -o "$audiolocation%(title)s.%(ext)s" -x --audio-quality 0 --audio-format "$qualityop" --restrict-filenames $url)" ;;
	esac
}

case $choice in
"Audio") audio ;;
"Video") vid ;;
*) exit ;;
esac
